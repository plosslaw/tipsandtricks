important quality of life vimrc configs

_vimrc:
syntax on(if needed)
colorscheme desert

if has("gui_running")
  if has("gui_gtk2")
    set guifont=Inconsolata\ 12
  elseif has("gui_macvim")
    set guifont=Menlo\ Regular:h14
  elseif has("gui_win32")
    set guifont=Consolas:h11:cANSI
  endif
endif
 extra stuff

execute pathogen#infect()
filetype plugin indent on


set whichwrap+=<,>,h,l,[,]
set incsearch
set encoding=utf-8

set number relativenumber
set autoindent
set tabstop=8 softtabstop=0 expandtab shiftwidth=4 smarttab

nnoremap <F2> :args *.cpp <bar> tab all <CR>

nnoremap <C-v> "+p
vnoremap <C-v> "+p
inoremap <C-v> <ESC>"+p A

vnoremap <C-c> "+y
nnoremap <C-c> "+yy
inoremap jj <ESC>
vnoremap ii <ESC>

"quick comment
noremap <silent><C-m> :<S-Left>exe "<S-Right>normal! ".comment<CR>
noremap <silent><C-n> :<S-Left>exe "<S-Right>normal! ".uncomment<CR>

"open terminal and return focus to editor/close terminal
nnoremap <expr> <silent><M-v> (len(term_list())==0) ? ':terminal ++rows=10 <CR><C-l>j' :':call term_sendkeys(term_list()[0],"exit\<lt>CR>")<CR>'

set twk=<C-l>
nnoremap <C-l> <C-w>

"C-v to paste input && C-c to terminate(by default)
tnoremap <C-v> <C-l>"+
tnoremap <M-v> exit<CR>



autocmd filetype java let comment='I//'
autocmd filetype java let uncomment='^xx'
autocmd filetype cpp let comment='I//'
autocmd filetype cpp let uncomment='^xx'
autocmd filetype python let comment='I#'
autocmd filetype python let uncomment='^x'
autocmd filetype perl let comment='I#'
autocmd filetype perl let uncomment='^x'



autocmd filetype java nnoremap <F5> :w <bar> !javac % && java -enableassertions %:r <CR>
autocmd filetype python nnoremap <F5> :w <bar> !python % <CR>
autocmd filetype perl nnoremap <F5> :w <bar> !perl % <CR>
autocmd filetype go nnoremap <F5> :w <bar> !go build % && %:r <CR>

"autocmd filetype cpp nnoremap <silent><F5> :w <bar> call term_sendkeys(term_list()[0],"g++ -ulimit -Wall -Wno-unused-result -std=c++14 ".expand('%')." -o ".expand('%:r')." && ".expand('%:r')."\<lt>CR>")<CR><C-w>k

autocmd filetype cpp nnoremap <expr><F5> (len(term_list())==0)  
            \? ':w <bar> terminal ++rows=10<CR><C-l>j' 
            \: ':w <bar> call term_sendkeys(term_list()[0],"g++ -ulimit -Wall -Wno-unused-result -std=c++14 ".expand("%")." -o ".expand("%:r")." && ".expand("%:r")."\<lt>CR>")<CR><C-w>k'

autocmd filetype cpp nnoremap <expr><silent><F6> (len(term_list())==0)  
            \? ':w <bar> terminal ++rows=10 <CR><C-l>j'
            \: ':w <bar> call term_sendkeys(term_list()[0],"g++ -ulimit -Wall -Wno-unused-result -std=c++14 -O2 ".expand("%")." -o ".expand("%:r")." && ".expand("%:r")."\<lt>CR>")<CR><C-w>k'

autocmd filetype cpp nnoremap <expr><silent><F7> (len(term_list())==0)  
            \? ':w <bar> terminal ++rows=10 <CR><C-l>j' 
            \: ':w <bar> call term_sendkeys(term_list()[0],"g++ -ulimit -Wall -Wno-unused-result -std=c++14 -O2 ".expand("%")." -o ".expand("%:r")."\<lt>CR>")<CR><C-w>k'


"autocmd filetype cpp nnoremap <F5> :w <bar> !g++ -ulimit -Wall -Wno-unused-result -std=c++14 % -o %:r && %:r <CR>
"autocmd filetype cpp nnoremap <F6> :w <bar> !g++ -ulimit -Wall -Wno-unused-result -std=c++14   -O2   % -o %:r && %:r <CR>
"autocmd filetype cpp nnoremap <F7> :w <bar> !g++ -ulimit -Wall -Wno-unused-result -std=c++14 % -o %:r<CR>



"alternative key binds

autocmd filetype cpp nnoremap <expr><silent><M-r> (len(term_list())==0)  
            \? ':w <bar> terminal ++rows=10 <CR><C-l>j' 
            \: ':w <bar> call term_sendkeys(term_list()[0],"g++ -ulimit -Wall -Wno-unused-result -std=c++14 ".expand("%")." -o ".expand("%:r")." && ".expand("%:r")."\<lt>CR>")<CR><C-w>k'

autocmd filetype cpp nnoremap <expr><silent><M-o> (len(term_list())==0)  
            \? ':w <bar> terminal ++rows=10 <CR><C-l>j'
            \: ':w <bar> call term_sendkeys(term_list()[0],"g++ -ulimit -Wall -Wno-unused-result -std=c++14 -O2 ".expand("%")." -o ".expand("%:r")." && ".expand("%:r")."\<lt>CR>")<CR><C-w>k'

autocmd filetype cpp nnoremap <expr><silent><M-c> (len(term_list())==0)  
            \? ':w <bar> terminal ++rows=10 <CR><C-l>j' 
            \: ':w <bar> call term_sendkeys(term_list()[0],"g++ -ulimit -Wall -Wno-unused-result -std=c++14 -O2 ".expand("%")." -o ".expand("%:r")."\<lt>CR>")<CR><C-w>k'


inoremap ;; <Esc>/<++><CR>"_c4l

inoremap {<CR> {<CR><CR>}<Esc>kcc
inoremap '' ''<++><Esc>4hi
inoremap "" ""<++><Esc>4hi
inoremap [] []<++><Esc>4hi
inoremap () ()<++><Esc>4hi
inoremap {} {}<++><Esc>4hi
inoremap <> <><++><Esc>4hi
inoremap \\ '\n'

"for loop snippet
autocmd filetype cpp inoremap ;fi for(int i = <++> ; i < <++>; i++){<CR><++><CR>} <Esc>/<++><CR>"_c4l 
autocmd filetype cpp inoremap ;fj for(int j = <++> ; j < <++>; j++){<CR><++><CR>} <Esc>/<++><CR>"_c4l
autocmd filetype cpp inoremap ;fk for(int k = <++> ; k < <++>; k++){<CR><++><CR>} <Esc>/<++><CR>"_c4l 

autocmd filetype cpp inoremap ;# #include <><Esc>i




plugins:

https://github.com/tpope/vim-pathogen

https://github.com/tpope/vim-surround

https://github.com/mhartington/oceanic-next

https://github.com/ycm-core/YouCompleteMe



n: normal only

v: visual and select

o: operator-pending

x: visual only

s: select only

i: insert

c: command-line

l: insert, command-line, regexp-search (and others. Collectively called "Lang-Arg" pseudo-mode)
